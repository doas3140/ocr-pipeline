# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/06_ocr_inference.ipynb (unless otherwise specified).

__all__ = ['OcrPredictor', 'decode_ctc', 'CrnnOcrPredictor', 'CrnnOcrPredictor', 'TesseractOcrPredictor',
           'AttentionOcrPredictor', 'TransformerOcrPredictor']

# Cell
from .core import load_inference, plot
from fastai import *
from fastai.vision import *
import numpy as np
import cv2

# Cell
class OcrPredictor:
    def __init__(self):
        pass

    def image2text(self, image):
        pass

# Cell
def decode_ctc(texts, classes):
    """ convert text-index into text-label.
    @param: list(arr[N],...) :list of arrays of size N, where N can differ between elements (elements in arr are indexes)
    @return list(arr[M],...) :same just as strings and M are always <= N
    """
    out = []
    index = 0
    for t in texts:
        char_list = []
        for i in range(len(t)):
            if t[i] != 0 and (not (i > 0 and t[i - 1] == t[i])):  # removing repeated characters and blank.
                char_list.append(t[i])
        out.append(tensor(char_list))
    return out

# Cell
from .ocr_crnn_training import *

class CrnnOcrPredictor(OcrPredictor):
    def __init__(self, model_name='crnn_ocr', use_gpu=False):
        '''
        @param: str  :name of model in ../models dir
        @param: bool :use gpu? (model ~600mb)
        '''
        self.model_name, self.use_gpu = model_name, use_gpu
        if self.use_gpu: defaults.device = torch.device('cuda')
        else: defaults.device = torch.device('cpu')
        self.learner = load_inference(model_name)

    def image2text(self, image):
        '''
        @param: torch.arr[h,w,3] :(make sure its in RGB not BGR! and pixel range is [0-255])
        @return str              :text string
        '''
        image = Image(image.permute(2,0,1).float() / 255.)
        batch = self.learner.data.one_item(image)
        preds = self.learner.model.eval()(batch[0]).squeeze().argmax(-1)
        text = decode_ctc([preds], classes=self.learner.data.classes)[0]
        if list(text.shape) == []: return ''
        indexes = [int(i) for i in text]
        return ''.join([self.learner.data.classes[i] for i in indexes])

# Cell
from .ocr_crnn_training import *

class CrnnOcrPredictor(OcrPredictor):
    def __init__(self, model_name='crnn_ocr', use_gpu=False):
        '''
        @param: str  :name of model in ../models dir
        @param: bool :use gpu? (model ~600mb)
        '''
        self.model_name, self.use_gpu = model_name, use_gpu
        if self.use_gpu: defaults.device = torch.device('cuda')
        else: defaults.device = torch.device('cpu')
        self.learner = load_inference(model_name)

    def image2text(self, image):
        '''
        @param: torch.arr[h,w,3] :(make sure its in RGB not BGR! and pixel range is [0-255])
        @return str              :text string
        '''
        image = Image(tensor(image).permute(2,0,1) / 255.)
        pred,_,_ = self.learner.predict(image)
        chars, font = pred.obj
        return ''.join(chars), font

# Cell
import pytesseract

class TesseractOcrPredictor(OcrPredictor):
    def __init__(self):
        pass

    def image2text(self, image, config=("-l eng --oem 1 --psm 3")):
        '''
        @param: torch.arr[h,w,3] :(make sure its in RGB not BGR! and pixel range is [0-255])
        @param: str              :tesseract config w/ params
        @return str              :text string
        '''
        return pytesseract.image_to_string(to_np(image), config=config), 'Unknown'

# Cell
from .ocr_attention_training import *

class AttentionOcrPredictor(CrnnOcrPredictor):
    def __init__(self, model_name='attention_ocr', use_gpu=False):
        super().__init__(model_name, use_gpu)

# Cell
from .ocr_transformer_training import *

class TransformerOcrPredictor(OcrPredictor):
    def __init__(self, model_name='transformer_ocr', use_gpu=False):
        '''
        @param: str  :name of model in ../models dir
        @param: bool :use gpu? (model ~600mb)
        '''
        self.model_name, self.use_gpu = model_name, use_gpu
        if self.use_gpu: defaults.device = torch.device('cuda')
        else: defaults.device = torch.device('cpu')
        self.learner = load_inference(model_name)
        self.bos_idx = self.learner.data.classes.index(transformer_config.bos)
        self.eos_idx = self.learner.data.classes.index(transformer_config.eos)

    def image2text(self, image, max_len=99):
        '''
        @param: torch.arr[h,w,3] :(make sure its in RGB not BGR! and pixel range is [0-255])
        @param: int              :maximum length of generated string
        @return str              :text string
        '''
        image = Image(tensor(image).permute(2,0,1) / 255.)
        x, _ = self.learner.data.one_item(image)
        b,c,h,w = x.shape
        x_enc, f_out, f_emb = self.learner.model.encode_images(x)
        y_input = x.new(b,1).long().fill_(self.bos_idx)
        for i in range(max_len):
            y_pred = self.learner.model.decode(x_enc, y_input) # [b,y+1,c]
            y_pred = y_pred.argmax(-1)
            y_input = F.pad(y_input, (0, 1), value=y_pred[0,-1])
            if (y_input[:,-1] == self.eos_idx).all(): break
        text = ''.join([self.learner.data.classes[c] for c in y_input[0]][1:-1]) # remove bos, eos
        font = self.learner.data.font_classes[f_out.argmax(-1).view(1)]
        return text, font