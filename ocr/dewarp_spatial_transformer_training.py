# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/13_dewarp_transformation_predictor_training.ipynb (unless otherwise specified).

__all__ = ['opencv_transform', 'random_affine_transform', 'random_affine_transform', 'im2tensor_data_collate']

# Cell
from .core import *
from fastai import *
from fastai.vision import *
from fastai.callbacks.hooks import *
from .ocr_dataset_brno import brno_ocr_config
from pathlib import PosixPath
import cv2

# Cell
def opencv_transform(fun):
    def transform(x, **kwargs):
        x = (image2np(x)*255).astype(np.uint8)
        x = fun(x, **kwargs)
        return tensor(x/255.).permute(2,0,1)
    return transform

# gaussian_blur = TfmPixel(_gaussian_blur)
def random_affine_transform(angles, p=1.0):
    return RandTransform(tfm=TfmPixel(opencv_transform(rotate_image)), kwargs={'angles':angles}, p=p, resolved={}, do_run=True, is_random=True, use_on_y=False)

# Cell
def random_affine_transform(angles, p=1.0):
    return RandTransform(tfm=TfmPixel(OpenCVTransform(rotate_image, rotate_angle)), kwargs={'angles':angles}, p=p, resolved={}, do_run=True, is_random=True, use_on_y=True)

# Cell
def im2tensor_data_collate(batch:ItemsList, pad_idx:int=1)->Tensor:
    if isinstance(batch[0][1], int): return data_collate(batch)
    "Convert `batch` items to tensor data."
    data = to_data(batch) # list of (image, array) pairs
    max_x_w = max([image.shape[2] for image, y in data])
    max_x_h = max([image.shape[1] for image, y in data])
    max_y_len = max([len(y) for image, y in data])

    images = torch.zeros(len(batch), 3, max_x_h, max_x_w) + pad_idx
    ys = torch.zeros(len(batch), max_y_len)
    for i, (image, y) in enumerate(data):
        c,h,w = image.shape
        pad_h, pad_w = int((max_x_h-h)/2), int((max_x_w-w)/2)
        images[i, : , pad_h:max_x_h-pad_h , pad_w:max_x_w-pad_w ] = image
        y = tensor(listify(y)).view(-1)
        ys[i, :len(y)] = y
    return images, ys